it is recursive 
quick sort = pivot
that meet the 3 condition
   1. Correct position in final, sorted array
   2. Items to the lelf are smaller
   3. Items to the right are larger
take pivot of array swap it with the last index of list by arr[-1] 
   1. item_from_left= that is larger than (pivot)
   2. item_from_right=that is smaller tha (pivot)
   arr = [2, 6, 5, 3, 8, 7, 1, 0]  	=> arr[3] = 3 -> swap it with last index: arr[-1] = 0
                   p           ^last list value 
   arr = [2, 6, 5, 0, 8, 7, 1, 3]   => item_form_left = 6 && item_form_rigth = 1
             ^l             ^r p
   swap item_form_left= with item_form_rigth= with each other that are marked with ^
   arr = [2, 1, 5, 0, 8, 7, 6, 3]
                ^l ^r          p
   swap item_form_left= with item_form_rigth= with each other that are marked with ^
   arr = [2, 1, 0, 5, 8, 7, 6, 3]
                ^r ^l          p
stop when [index] of item_form_left= > [index] of item_form_rigth=               
if_TRUE= swap item_form_left= with (pivot)
   arr = [2, 1, 0, 3, 8, 7, 6, 5]
                   p 
NOW the 3 condition == TRUE
(DUE TO RECURSIVE WE CAN RECURSIVE THE) item_form_left= && item_form_rigth= (WITH THE SAME METHOD: "quicksort")
E.G. the item_from_right= which are now the right_partition by this they are greater then (pivot):
   arr_r = [8, 7, 6, 5] => take 7 as (pivot) and change the places with the arr_r[-1] = 5
               p     ^
   arr_r = [8, 5, 6, 7] => swap item_form_left= with item_form_rigth= 
            ^l    ^r p
   arr_r = [6, 5, 8, 7] => you can not swap 
               ^r ^l p
stop when [index] of item_form_left= > [index] of item_form_rigth= 
if_TRUE= swap item_form_left= with (pivot)
   arr_r = [6, 5, 7, 8] => append to the arr= => arr = [2, 1, 0, 3, 6, 5, 7, 8] => and so on.
                  p                                              p1       p2
(NOW YOU SHOULD UNDERSTAND THE CONCEPT)
few recursives later...
   arr = [0, 1, 2, 3, 4, 5, 6, 7, 8]

(how to choose a pivot)
   use middel_of_three =


#-------------------------------------------------#
# CODE from wiki
#-------------------------------------------------#
   Quicksort(A as array, low as int, high as int){
      if (low < high){
          pivot_location = Partition(A,low,high)
          Quicksort(A,low, pivot_location-1)
          Quicksort(A, pivot_location + 1, high)
      }
  }
  Partition(A as array, low as int, high as int){
       pivot = A[low]
       leftwall = low
  
       for i = low + 1 to high{
           if (A[i] < pivot) then{
               swap(A[i], A[leftwall + 1])
               leftwall = leftwall + 1
           }
       }
       swap(pivot,A[leftwall])
  
      return (leftwall)}


