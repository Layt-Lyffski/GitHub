
def linearSearch(value):
    valueInArray = False;
    value_index = "";
    
    for(i = 0; i < arraySize; i++){

        if(theArray[i] == value){
            valueInArray = true;
            value_index+= i + " ";
        }
    }

    if(!valueInArray){
        value_index = "None";
    }
    
    print("The Value was Found in the Following: " + value_index);
    return value_index;




    # This bubble sort will sort everything from 
	# smallest to largest		
def bubbleSort()
			
    # i starts at the end of the Array
    # As it is decremented all indexes greater
    # then it are sorted
    
    for(i = arraySize - 1; i > 1; i--){
        
        # The inner loop starts at the beginning of 
        # the array and compares each value next to each 
        # other. If the value is greater then they are 
        # swapped
        
        for(int j = 0; j < i; j++){
            
            # To change sort to Descending change to <
            
            if(theArray[j] > theArray[j + 1]){
                
                swapValues(j, j+1);
                
                printHorzArray(i, j);
                
            }
            
        }
        
    }	


# The Binary Search is quicker than the linear search
# because all the values are sorted. Because everything
# is sorted once you get to a number larger than what
# you are looking for you can stop the search. Also
# you be able to start searching from the middle 
# which speeds the search. It also works best when 
# there are no duplicates

def binarySearchForValue(value)
    
    lowIndex = 0;
    highIndex = arraySize - 1;
    
    while(lowIndex <= highIndex){
        
        middleIndex = (highIndex + lowIndex) / 2;
        
        if(theArray[middleIndex] < value) lowIndex = middleIndex + 1;
        
        else if(theArray[middleIndex] > value) highIndex = middleIndex - 1;
        
        else {
            
            print("\nFound a Match for " + value + " at Index " + middleIndex);
            
            lowIndex = highIndex + 1;
            
        }   
    }
		
		# Selection sort search for the smallest number in the array
		# saves it in the minimum spot and then repeats searching
		# through the entire array each time
		
def selectionSort()
    for(int x=0; x < arraySize; x++){
            int minimum = x;
            
            for(int y=x; y < arraySize; y++){
                if(theArray[minimum]>theArray[y]){
                    minimum = y;
                }
            }
            
            swapValues(x, minimum);
    }
    
		
		# The Insertion Sort is normally the best of 
		# the elementary sorts. Unlike the other sorts that
		# had a group sorted at any given time, groups are
		# only partially sorted here.
def insertionSort()
    for (int i = 1; i < arraySize; i++){
        int j = i;
        int toInsert = theArray[i];

        while ((j > 0) && (theArray[j-1] > toInsert)){
            theArray[j] = theArray[j-1];
            j--;
            printHorzArray(i, j);
        }

        theArray[j] = toInsert;
        printHorzArray(i, j);
        
        print("\nArray[i] = " + theArray[i] + " Array[j] = " + theArray[j] + " toInsert = " + toInsert + "\n");	  
    }

	
def swapValues(indexOne, indexTwo)
    temp = theArray[indexOne];
    theArray[indexOne] = theArray[indexTwo];
    theArray[indexTwo] = temp;
