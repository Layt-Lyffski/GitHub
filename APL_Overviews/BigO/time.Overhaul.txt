time complexity: a way of showing how the runtime of a function increases
  define input in function
    1. find the fastest growing term
    2. take out the coefficient
  Constant: O(1) := T = c = 0.115 = 0.115 * 1 = O(1)
      #E.G
        given_array = [1, 3, 3, 63]
        def f(given_array): //T = O(1) + O(1) = c°1 + c°2 = c°3 = c°3*1 = O(1)
          total = 0 -> O(1)       //O(1) == c°1 || c°2 && c°3 == T == O(1)
          return total -> O(1)

  Logarithmic: O(log(n))

  Linear: O(n) := T = an + b
        given_array = [6,5,48,5]
        def f(given_array): // T = O(1)+n*O(1)+O(1) = c°4+n*c°5 = O(n)
                                    //O(1) == c°4 || c°5 && T = 0(n)

  Linearithmic: O(nlog(n))

  Quadratic: O(n^2)

  Cubic: O(n^3)

  Exponential: O(b^n), b > 1

  Factorial: O(n!)
